N : Type 0
s : N -> N
z : N
numeral := forall A : Type 0, (A -> A) -> A -> A
zero := fun (A : Type 0) (_ : A -> A) (x : A) => x
one := fun (A : Type 0) (f : A -> A) (x : A) => f x
two := fun (A : Type 0) (f : A -> A) (x : A) => f (f x)
three := fun (A : Type 0) (f : A -> A) (x : A) => f (f (f x))
plus := fun (m : numeral) (n : numeral) (A : Type 0) (f : A -> A) (x : A) => m A f (n A f x)

Nat : Prop
z : Nat
s : Nat -> Nat

nat_elim := forall P : Nat -> Prop, P z -> (forall n : Nat, P n -> P (s z)) -> (forall n : Nat, P n)
nat_elim := fun (P : Nat -> Prop) (ze : P z) (se : fun (l : Nat) => )